package Controllers;

import Models.Circulo;
import Models.Cuadrado;
import Models.FiguraEstandar;
import Models.FiguraGeometrica;
import Models.Imagen;
import Models.Poligono;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.LinkedList;

/**
 *
 * @author Santi
 */
public class Lienzo extends javax.swing.JPanel implements Runnable{

    private LinkedList<FiguraGeometrica> misFiguras;
    private boolean playing;
    
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        this.misFiguras = new LinkedList<>();
        this.playing = false;
    }
    
    public void drawCuadrado(Graphics p, Cuadrado c) {
        if (c.getColorBorde() != null) {
            p.setColor(c.getColorBorde());
        }
        p.drawRect(c.getX(), c.getY(), c.getLado(), c.getLado());
        
        if (c.getColorRelleno() != null) {
            p.setColor(c.getColorRelleno());
        }
        p.fillRect(c.getX(), c.getY(), c.getLado(), c.getLado());
    }
    
    public void drawCircle(Graphics p, Circulo s) {
        if (s.getColorBorde() != null) {
            p.setColor(s.getColorBorde());
        }
        p.drawOval(s.getX(), s.getY(), s.getRadio(), s.getRadio());
        
        if (s.getColorRelleno()!= null) {
            p.setColor(s.getColorRelleno());
        }
        p.fillOval(s.getX(), s.getY(), s.getRadio(), s.getRadio());
    }
    
    public void drawImage(Graphics p, Imagen i) {
        Toolkit t = Toolkit.getDefaultToolkit();
        Image imagen = t.getImage(i.getUrl());
        p.drawImage(imagen, i.getX(), i.getY(), i.getAncho(), i.getAlto(), this);     
    }
    
    public void drawPolygon(Graphics p, Poligono pol) {
        if (pol.getColorBorde() != null) {
            p.setColor(pol.getColorBorde());
        }
        
        p.drawPolygon(pol.getX(), pol.getY(), pol.getX().length);
        
        if (pol.getColorRelleno() != null) {
            p.setColor(pol.getColorRelleno());
        }
        
        p.fillPolygon(pol.getX(), pol.getY(), pol.getX().length);
        
    }
    
    @Override
    public void paintComponent(Graphics p) {
        super.paintComponent(p);
        for (FiguraGeometrica current : this.getMisFiguras()) {
            if (current instanceof Cuadrado)        drawCuadrado(p, (Cuadrado) current);
            else if (current instanceof Circulo)    drawCircle(p, (Circulo) current);
            else if (current instanceof Imagen)     drawImage(p, (Imagen) current);
            else if (current instanceof Poligono)   drawPolygon(p, (Poligono) current);
        }
//        p.drawRect(10, 10, 50, 50);
//        p.setColor(Color.red);
//        p.fillRect(10, 10, 30, 30);
//        p.setColor(Color.black);
//        p.drawOval(100, 10, 100, 100);
//        
//        Toolkit t = Toolkit.getDefaultToolkit();
//        Image imagen = t.getImage("src/Images/bmw.png");
//        p.drawImage(imagen, 150, 200, 150, 150, this);        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @return the misFiguras
     */
    public LinkedList<FiguraGeometrica> getMisFiguras() {
        return misFiguras;
    }

    /**
     * @param misFiguras the misFiguras to set
     */
    public void setMisFiguras(LinkedList<FiguraGeometrica> misFiguras) {
        this.misFiguras = misFiguras;
    }

    @Override
    public void run() {
        System.out.println("Playing");
        while(this.playing) {
            System.out.println("test");
            this.move();
            repaint();
            waitt(10);
        }
        System.out.println("Stopped Playing");
    }
    
    private void waitt(int ms) {
        try {
            Thread.sleep(ms);
            
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }
    
    public void move() {
        for (FiguraGeometrica current: this.misFiguras) {
            if (current instanceof FiguraEstandar) {
                if (current.getDirection() == 1 && ((FiguraEstandar) current).getY() > 0 && ((FiguraEstandar) current).getY() < this.getHeight() - 100) {
                    ((FiguraEstandar) current).moveUp(10);
                }
                else if (current.getDirection() == 2 && 
                        ((FiguraEstandar) current).getY() > 0 && ((FiguraEstandar) current).getY() < this.getHeight() - 100 &&
                        ((FiguraEstandar) current).getX() > 0 && ((FiguraEstandar) current).getX() < this.getWidth())   {
                    ((FiguraEstandar) current).moveUp(10);
                    ((FiguraEstandar) current).moveR(10);
                }
                else if (current.getDirection() == 3 && ((FiguraEstandar) current).getX() > 0 && ((FiguraEstandar) current).getX() < this.getWidth()) {
                    ((FiguraEstandar) current).moveR(10);
                }
                else if (current.getDirection() == 4 && 
                        ((FiguraEstandar) current).getY() > 0 && ((FiguraEstandar) current).getY() < this.getHeight() - 100 &&
                        ((FiguraEstandar) current).getX() > 0 && ((FiguraEstandar) current).getX() < this.getWidth())   {
                    ((FiguraEstandar) current).moveDown(10);
                    ((FiguraEstandar) current).moveR(10);
                }
                else if (current.getDirection() == 5 && ((FiguraEstandar) current).getY() > 0 && ((FiguraEstandar) current).getY() < this.getHeight() - 100) {
                    ((FiguraEstandar) current).moveDown(10);
                }
                else if (current.getDirection() == 6 && 
                        ((FiguraEstandar) current).getY() > 0 && ((FiguraEstandar) current).getY() < this.getHeight() - 100 &&
                        ((FiguraEstandar) current).getX() > 0 && ((FiguraEstandar) current).getX() < this.getWidth())   {
                    ((FiguraEstandar) current).moveDown(10);
                    ((FiguraEstandar) current).moveL(10);
                }
                else if (current.getDirection() == 7 && ((FiguraEstandar) current).getX() > 0 && ((FiguraEstandar) current).getX() < this.getWidth()) {
                    ((FiguraEstandar) current).moveL(10);
                }
                else if (current.getDirection() == 8 && 
                        ((FiguraEstandar) current).getY() > 0 && ((FiguraEstandar) current).getY() < this.getHeight() - 100 &&
                        ((FiguraEstandar) current).getX() > 0 && ((FiguraEstandar) current).getX() < this.getWidth())   {
                    ((FiguraEstandar) current).moveUp(10);
                    ((FiguraEstandar) current).moveL(10);
                }
            }   
        }
    }
    
    /**
     * @return the playing
     */
    public boolean isPlaying() {
        return playing;
    }

    /**
     * @param playing the playing to set
     */
    public void setPlaying(boolean playing) {
        this.playing = playing;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
